
Texture2D colorTexture : register(t0);
Texture2D normalTexture : register(t1);
SamplerState SampleTypePoint : register(s0);

cbuffer LightBuffer
{
    //float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 colors;
	float4 normals;
	float3 lightDir;
	float lightIntensity;
	float4 outputColor;


    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
	colors = colorTexture.Sample(SampleTypePoint, input.tex);
	normals = normalTexture.Sample(SampleTypePoint, input.tex);

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(normals.xyz, lightDir));

    // Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
    outputColor = saturate(colors * lightIntensity);

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    //color = color * textureColor;
    return outputColor;
}
